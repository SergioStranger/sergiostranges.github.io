{"version":3,"file":"js/home.dfdc74ad.js","mappings":"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","sources":["webpack://nyako.ru/./src/views/HomeView.vue","webpack://nyako.ru/./src/views/HomeView.vue?1da1","webpack://nyako.ru/../src/defaults.js","webpack://nyako.ru/../src/initializer.js","webpack://nyako.ru/../src/html-parser.js","webpack://nyako.ru/../src/typed.js"],"sourcesContent":["<template>\n  <div class=\"row\">\n    <div class=\"wrapper col-lg-7 my-auto\">\n      <h1 class=\"wrapper-title tag\"><span id=\"title\"></span></h1>\n      <p class=\"wrapper-description\"><span id=\"desc\"></span></p>\n      <p href=\"#\" class=\"wrapper-continue\"><span id=\"space\"></span></p>\n    </div>\n    <img class=\"d-none d-lg-block col-lg-5\" src=\"@/assets/images/portal.png\" alt=\"Portal\">\n  </div>\n</template>\n\n<script>\nimport Typed from \"typed.js\";\n\nexport default {\n  name: 'HomeView',\n  data() {\n    return {\n      typedInstance: null,\n      isSkip: false\n    }\n  },\n  methods: {\n    initTyped(item, text) {\n      const options = {\n        strings: text,\n        typeSpeed: 20,\n        backSpeed: 10,\n        showCursor: true,\n        cursorChar: ' _',\n        onComplete: (self) => {\n          if (item === '#title') {\n            this.initTyped('#desc', [\n              `Ты в странном месте, где домен не соотвествует тематике\n          веб-сайта, а сам дизайн оставляет желать лучшего.\n          Теперь все зависит от тебя, оставаться здесь или уйти.<br>\n          Выбор за тобой.`\n            ]);\n          } else if (item === '#desc') {\n            this.initTyped('#space', ['Жмяк ‘space’ чтобы продолжить']);\n            this.isSkip = true\n          }\n\n          // Скрываем курсор, если текущий элемент не '#space'\n          if (item !== '#space') {\n            self.cursor.hidden = true;\n          }\n        },\n      };\n\n      this.typedInstance = new Typed(item, options)\n      return this.typedInstance\n    },\n    spaceKey(event) {\n      if (event.key ===  ' ' && this.isSkip) {\n        this.$router.push('projects')\n        console.log('редирект')\n      }\n    }\n  },\n  mounted() {\n    this.initTyped('#title', ['Ghbdtn!', 'Привет!'])\n\n    document.addEventListener('keydown', this.spaceKey)\n  },\n  beforeUnmount() {\n    this.typedInstance.destroy()\n    document.removeEventListener('keydown', this.spaceKey)\n  }\n}\n</script>\n","import { render } from \"./HomeView.vue?vue&type=template&id=f7ce32ea\"\nimport script from \"./HomeView.vue?vue&type=script&lang=js\"\nexport * from \"./HomeView.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","/**\n * Defaults & options\n * @returns {object} Typed defaults & options\n * @public\n */\n\nconst defaults = {\n  /**\n   * @property {array} strings strings to be typed\n   * @property {string} stringsElement ID of element containing string children\n   */\n  strings: [\n    'These are the default values...',\n    'You know what you should do?',\n    'Use your own!',\n    'Have a great day!',\n  ],\n  stringsElement: null,\n\n  /**\n   * @property {number} typeSpeed type speed in milliseconds\n   */\n  typeSpeed: 0,\n\n  /**\n   * @property {number} startDelay time before typing starts in milliseconds\n   */\n  startDelay: 0,\n\n  /**\n   * @property {number} backSpeed backspacing speed in milliseconds\n   */\n  backSpeed: 0,\n\n  /**\n   * @property {boolean} smartBackspace only backspace what doesn't match the previous string\n   */\n  smartBackspace: true,\n\n  /**\n   * @property {boolean} shuffle shuffle the strings\n   */\n  shuffle: false,\n\n  /**\n   * @property {number} backDelay time before backspacing in milliseconds\n   */\n  backDelay: 700,\n\n  /**\n   * @property {boolean} fadeOut Fade out instead of backspace\n   * @property {string} fadeOutClass css class for fade animation\n   * @property {boolean} fadeOutDelay Fade out delay in milliseconds\n   */\n  fadeOut: false,\n  fadeOutClass: 'typed-fade-out',\n  fadeOutDelay: 500,\n\n  /**\n   * @property {boolean} loop loop strings\n   * @property {number} loopCount amount of loops\n   */\n  loop: false,\n  loopCount: Infinity,\n\n  /**\n   * @property {boolean} showCursor show cursor\n   * @property {string} cursorChar character for cursor\n   * @property {boolean} autoInsertCss insert CSS for cursor and fadeOut into HTML <head>\n   */\n  showCursor: true,\n  cursorChar: '|',\n  autoInsertCss: true,\n\n  /**\n   * @property {string} attr attribute for typing\n   * Ex: input placeholder, value, or just HTML text\n   */\n  attr: null,\n\n  /**\n   * @property {boolean} bindInputFocusEvents bind to focus and blur if el is text input\n   */\n  bindInputFocusEvents: false,\n\n  /**\n   * @property {string} contentType 'html' or 'null' for plaintext\n   */\n  contentType: 'html',\n\n  /**\n   * Before it begins typing\n   * @param {Typed} self\n   */\n  onBegin: (self) => {},\n\n  /**\n   * All typing is complete\n   * @param {Typed} self\n   */\n  onComplete: (self) => {},\n\n  /**\n   * Before each string is typed\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  preStringTyped: (arrayPos, self) => {},\n\n  /**\n   * After each string is typed\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  onStringTyped: (arrayPos, self) => {},\n\n  /**\n   * During looping, after last string is typed\n   * @param {Typed} self\n   */\n  onLastStringBackspaced: (self) => {},\n\n  /**\n   * Typing has been stopped\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  onTypingPaused: (arrayPos, self) => {},\n\n  /**\n   * Typing has been started after being stopped\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  onTypingResumed: (arrayPos, self) => {},\n\n  /**\n   * After reset\n   * @param {Typed} self\n   */\n  onReset: (self) => {},\n\n  /**\n   * After stop\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  onStop: (arrayPos, self) => {},\n\n  /**\n   * After start\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  onStart: (arrayPos, self) => {},\n\n  /**\n   * After destroy\n   * @param {Typed} self\n   */\n  onDestroy: (self) => {},\n};\n\nexport default defaults;\n","import defaults from './defaults.js';\n/**\n * Initialize the Typed object\n */\n\nexport default class Initializer {\n  /**\n   * Load up defaults & options on the Typed instance\n   * @param {Typed} self instance of Typed\n   * @param {object} options options object\n   * @param {string} elementId HTML element ID _OR_ instance of HTML element\n   * @private\n   */\n\n  load(self, options, elementId) {\n    // chosen element to manipulate text\n    if (typeof elementId === 'string') {\n      self.el = document.querySelector(elementId);\n    } else {\n      self.el = elementId;\n    }\n\n    self.options = { ...defaults, ...options };\n\n    // attribute to type into\n    self.isInput = self.el.tagName.toLowerCase() === 'input';\n    self.attr = self.options.attr;\n    self.bindInputFocusEvents = self.options.bindInputFocusEvents;\n\n    // show cursor\n    self.showCursor = self.isInput ? false : self.options.showCursor;\n\n    // custom cursor\n    self.cursorChar = self.options.cursorChar;\n\n    // Is the cursor blinking\n    self.cursorBlinking = true;\n\n    // text content of element\n    self.elContent = self.attr\n      ? self.el.getAttribute(self.attr)\n      : self.el.textContent;\n\n    // html or plain text\n    self.contentType = self.options.contentType;\n\n    // typing speed\n    self.typeSpeed = self.options.typeSpeed;\n\n    // add a delay before typing starts\n    self.startDelay = self.options.startDelay;\n\n    // backspacing speed\n    self.backSpeed = self.options.backSpeed;\n\n    // only backspace what doesn't match the previous string\n    self.smartBackspace = self.options.smartBackspace;\n\n    // amount of time to wait before backspacing\n    self.backDelay = self.options.backDelay;\n\n    // Fade out instead of backspace\n    self.fadeOut = self.options.fadeOut;\n    self.fadeOutClass = self.options.fadeOutClass;\n    self.fadeOutDelay = self.options.fadeOutDelay;\n\n    // variable to check whether typing is currently paused\n    self.isPaused = false;\n\n    // input strings of text\n    self.strings = self.options.strings.map((s) => s.trim());\n\n    // div containing strings\n    if (typeof self.options.stringsElement === 'string') {\n      self.stringsElement = document.querySelector(self.options.stringsElement);\n    } else {\n      self.stringsElement = self.options.stringsElement;\n    }\n\n    if (self.stringsElement) {\n      self.strings = [];\n      self.stringsElement.style.cssText =\n        'clip: rect(0 0 0 0);clip-path:inset(50%);height:1px;overflow:hidden;position:absolute;white-space:nowrap;width:1px;';\n\n      const strings = Array.prototype.slice.apply(self.stringsElement.children);\n      const stringsLength = strings.length;\n\n      if (stringsLength) {\n        for (let i = 0; i < stringsLength; i += 1) {\n          const stringEl = strings[i];\n          self.strings.push(stringEl.innerHTML.trim());\n        }\n      }\n    }\n\n    // character number position of current string\n    self.strPos = 0;\n\n    // If there is some text in the element\n    self.currentElContent = this.getCurrentElContent(self);\n\n    if (self.currentElContent && self.currentElContent.length > 0) {\n      self.strPos = self.currentElContent.length - 1;\n      self.strings.unshift(self.currentElContent);\n    }\n\n    // the order of strings\n    self.sequence = [];\n\n    // Set the order in which the strings are typed\n    for (let i in self.strings) {\n      self.sequence[i] = i;\n    }\n\n    // current array position\n    self.arrayPos = 0;\n\n    // index of string to stop backspacing on\n    self.stopNum = 0;\n\n    // Looping logic\n    self.loop = self.options.loop;\n    self.loopCount = self.options.loopCount;\n    self.curLoop = 0;\n\n    // shuffle the strings\n    self.shuffle = self.options.shuffle;\n\n    self.pause = {\n      status: false,\n      typewrite: true,\n      curString: '',\n      curStrPos: 0,\n    };\n\n    // When the typing is complete (when not looped)\n    self.typingComplete = false;\n\n    self.autoInsertCss = self.options.autoInsertCss;\n\n    if (self.autoInsertCss) {\n      this.appendCursorAnimationCss(self);\n      this.appendFadeOutAnimationCss(self);\n    }\n  }\n\n  getCurrentElContent(self) {\n    let elContent = '';\n    if (self.attr) {\n      elContent = self.el.getAttribute(self.attr);\n    } else if (self.isInput) {\n      elContent = self.el.value;\n    } else if (self.contentType === 'html') {\n      elContent = self.el.innerHTML;\n    } else {\n      elContent = self.el.textContent;\n    }\n    return elContent;\n  }\n\n  appendCursorAnimationCss(self) {\n    const cssDataName = 'data-typed-js-cursor-css';\n\n    if (!self.showCursor || document.querySelector(`[${cssDataName}]`)) {\n      return;\n    }\n\n    let css = document.createElement('style');\n    css.setAttribute(cssDataName, 'true');\n\n    css.innerHTML = `\n        .typed-cursor{\n          opacity: 1;\n        }\n        .typed-cursor.typed-cursor--blink{\n          animation: typedjsBlink 0.7s infinite;\n          -webkit-animation: typedjsBlink 0.7s infinite;\n                  animation: typedjsBlink 0.7s infinite;\n        }\n        @keyframes typedjsBlink{\n          50% { opacity: 0.0; }\n        }\n        @-webkit-keyframes typedjsBlink{\n          0% { opacity: 1; }\n          50% { opacity: 0.0; }\n          100% { opacity: 1; }\n        }\n      `;\n\n    document.body.appendChild(css);\n  }\n\n  appendFadeOutAnimationCss(self) {\n    const cssDataName = 'data-typed-fadeout-js-css';\n\n    if (!self.fadeOut || document.querySelector(`[${cssDataName}]`)) {\n      return;\n    }\n\n    let css = document.createElement('style');\n    css.setAttribute(cssDataName, 'true');\n\n    css.innerHTML = `\n        .typed-fade-out{\n          opacity: 0;\n          transition: opacity .25s;\n        }\n        .typed-cursor.typed-cursor--blink.typed-fade-out{\n          -webkit-animation: 0;\n          animation: 0;\n        }\n      `;\n\n    document.body.appendChild(css);\n  }\n}\n\nexport let initializer = new Initializer();\n","/**\n * TODO: These methods can probably be combined somehow\n * Parse HTML tags & HTML Characters\n */\n\nexport default class HTMLParser {\n  /**\n   * Type HTML tags & HTML Characters\n   * @param {string} curString Current string\n   * @param {number} curStrPos Position in current string\n   * @param {Typed} self instance of Typed\n   * @returns {number} a new string position\n   * @private\n   */\n\n  typeHtmlChars(curString, curStrPos, self) {\n    if (self.contentType !== 'html') return curStrPos;\n    const curChar = curString.substring(curStrPos).charAt(0);\n    if (curChar === '<' || curChar === '&') {\n      let endTag = '';\n      if (curChar === '<') {\n        endTag = '>';\n      } else {\n        endTag = ';';\n      }\n      while (curString.substring(curStrPos + 1).charAt(0) !== endTag) {\n        curStrPos++;\n        if (curStrPos + 1 > curString.length) {\n          break;\n        }\n      }\n      curStrPos++;\n    }\n    return curStrPos;\n  }\n\n  /**\n   * Backspace HTML tags and HTML Characters\n   * @param {string} curString Current string\n   * @param {number} curStrPos Position in current string\n   * @param {Typed} self instance of Typed\n   * @returns {number} a new string position\n   * @private\n   */\n  backSpaceHtmlChars(curString, curStrPos, self) {\n    if (self.contentType !== 'html') return curStrPos;\n    const curChar = curString.substring(curStrPos).charAt(0);\n    if (curChar === '>' || curChar === ';') {\n      let endTag = '';\n      if (curChar === '>') {\n        endTag = '<';\n      } else {\n        endTag = '&';\n      }\n      while (curString.substring(curStrPos - 1).charAt(0) !== endTag) {\n        curStrPos--;\n        if (curStrPos < 0) {\n          break;\n        }\n      }\n      curStrPos--;\n    }\n    return curStrPos;\n  }\n}\n\nexport let htmlParser = new HTMLParser();\n","import { initializer } from './initializer.js';\nimport { htmlParser } from './html-parser.js';\n\n/**\n * Welcome to Typed.js!\n * @param {string} elementId HTML element ID _OR_ HTML element\n * @param {object} options options object\n * @returns {object} a new Typed object\n */\nexport default class Typed {\n  constructor(elementId, options) {\n    // Initialize it up\n    initializer.load(this, options, elementId);\n    // All systems go!\n    this.begin();\n  }\n\n  /**\n   * Toggle start() and stop() of the Typed instance\n   * @public\n   */\n  toggle() {\n    this.pause.status ? this.start() : this.stop();\n  }\n\n  /**\n   * Stop typing / backspacing and enable cursor blinking\n   * @public\n   */\n  stop() {\n    if (this.typingComplete) return;\n    if (this.pause.status) return;\n    this.toggleBlinking(true);\n    this.pause.status = true;\n    this.options.onStop(this.arrayPos, this);\n  }\n\n  /**\n   * Start typing / backspacing after being stopped\n   * @public\n   */\n  start() {\n    if (this.typingComplete) return;\n    if (!this.pause.status) return;\n    this.pause.status = false;\n    if (this.pause.typewrite) {\n      this.typewrite(this.pause.curString, this.pause.curStrPos);\n    } else {\n      this.backspace(this.pause.curString, this.pause.curStrPos);\n    }\n    this.options.onStart(this.arrayPos, this);\n  }\n\n  /**\n   * Destroy this instance of Typed\n   * @public\n   */\n  destroy() {\n    this.reset(false);\n    this.options.onDestroy(this);\n  }\n\n  /**\n   * Reset Typed and optionally restarts\n   * @param {boolean} restart\n   * @public\n   */\n  reset(restart = true) {\n    clearInterval(this.timeout);\n    this.replaceText('');\n    if (this.cursor && this.cursor.parentNode) {\n      this.cursor.parentNode.removeChild(this.cursor);\n      this.cursor = null;\n    }\n    this.strPos = 0;\n    this.arrayPos = 0;\n    this.curLoop = 0;\n    if (restart) {\n      this.insertCursor();\n      this.options.onReset(this);\n      this.begin();\n    }\n  }\n\n  /**\n   * Begins the typing animation\n   * @private\n   */\n  begin() {\n    this.options.onBegin(this);\n    this.typingComplete = false;\n    this.shuffleStringsIfNeeded(this);\n    this.insertCursor();\n    if (this.bindInputFocusEvents) this.bindFocusEvents();\n    this.timeout = setTimeout(() => {\n      // If the strPos is 0, we're starting from the beginning of a string\n      // else, we're starting with a previous string that needs to be backspaced first\n      if (this.strPos === 0) {\n        this.typewrite(this.strings[this.sequence[this.arrayPos]], this.strPos);\n      } else {\n        this.backspace(this.strings[this.sequence[this.arrayPos]], this.strPos);\n      }\n    }, this.startDelay);\n  }\n\n  /**\n   * Called for each character typed\n   * @param {string} curString the current string in the strings array\n   * @param {number} curStrPos the current position in the curString\n   * @private\n   */\n  typewrite(curString, curStrPos) {\n    if (this.fadeOut && this.el.classList.contains(this.fadeOutClass)) {\n      this.el.classList.remove(this.fadeOutClass);\n      if (this.cursor) this.cursor.classList.remove(this.fadeOutClass);\n    }\n\n    const humanize = this.humanizer(this.typeSpeed);\n    let numChars = 1;\n\n    if (this.pause.status === true) {\n      this.setPauseStatus(curString, curStrPos, true);\n      return;\n    }\n\n    // contain typing function in a timeout humanize'd delay\n    this.timeout = setTimeout(() => {\n      // skip over any HTML chars\n      curStrPos = htmlParser.typeHtmlChars(curString, curStrPos, this);\n\n      let pauseTime = 0;\n      let substr = curString.substring(curStrPos);\n      // check for an escape character before a pause value\n      // format: \\^\\d+ .. eg: ^1000 .. should be able to print the ^ too using ^^\n      // single ^ are removed from string\n      if (substr.charAt(0) === '^') {\n        if (/^\\^\\d+/.test(substr)) {\n          let skip = 1; // skip at least 1\n          substr = /\\d+/.exec(substr)[0];\n          skip += substr.length;\n          pauseTime = parseInt(substr);\n          this.temporaryPause = true;\n          this.options.onTypingPaused(this.arrayPos, this);\n          // strip out the escape character and pause value so they're not printed\n          curString =\n            curString.substring(0, curStrPos) +\n            curString.substring(curStrPos + skip);\n          this.toggleBlinking(true);\n        }\n      }\n\n      // check for skip characters formatted as\n      // \"this is a `string to print NOW` ...\"\n      if (substr.charAt(0) === '`') {\n        while (curString.substring(curStrPos + numChars).charAt(0) !== '`') {\n          numChars++;\n          if (curStrPos + numChars > curString.length) break;\n        }\n        // strip out the escape characters and append all the string in between\n        const stringBeforeSkip = curString.substring(0, curStrPos);\n        const stringSkipped = curString.substring(\n          stringBeforeSkip.length + 1,\n          curStrPos + numChars\n        );\n        const stringAfterSkip = curString.substring(curStrPos + numChars + 1);\n        curString = stringBeforeSkip + stringSkipped + stringAfterSkip;\n        numChars--;\n      }\n\n      // timeout for any pause after a character\n      this.timeout = setTimeout(() => {\n        // Accounts for blinking while paused\n        this.toggleBlinking(false);\n\n        // We're done with this sentence!\n        if (curStrPos >= curString.length) {\n          this.doneTyping(curString, curStrPos);\n        } else {\n          this.keepTyping(curString, curStrPos, numChars);\n        }\n        // end of character pause\n        if (this.temporaryPause) {\n          this.temporaryPause = false;\n          this.options.onTypingResumed(this.arrayPos, this);\n        }\n      }, pauseTime);\n\n      // humanized value for typing\n    }, humanize);\n  }\n\n  /**\n   * Continue to the next string & begin typing\n   * @param {string} curString the current string in the strings array\n   * @param {number} curStrPos the current position in the curString\n   * @private\n   */\n  keepTyping(curString, curStrPos, numChars) {\n    // call before functions if applicable\n    if (curStrPos === 0) {\n      this.toggleBlinking(false);\n      this.options.preStringTyped(this.arrayPos, this);\n    }\n    // start typing each new char into existing string\n    // curString: arg, this.el.html: original text inside element\n    curStrPos += numChars;\n    const nextString = curString.substring(0, curStrPos);\n    this.replaceText(nextString);\n    // loop the function\n    this.typewrite(curString, curStrPos);\n  }\n\n  /**\n   * We're done typing the current string\n   * @param {string} curString the current string in the strings array\n   * @param {number} curStrPos the current position in the curString\n   * @private\n   */\n  doneTyping(curString, curStrPos) {\n    // fires callback function\n    this.options.onStringTyped(this.arrayPos, this);\n    this.toggleBlinking(true);\n    // is this the final string\n    if (this.arrayPos === this.strings.length - 1) {\n      // callback that occurs on the last typed string\n      this.complete();\n      // quit if we wont loop back\n      if (this.loop === false || this.curLoop === this.loopCount) {\n        return;\n      }\n    }\n    this.timeout = setTimeout(() => {\n      this.backspace(curString, curStrPos);\n    }, this.backDelay);\n  }\n\n  /**\n   * Backspaces 1 character at a time\n   * @param {string} curString the current string in the strings array\n   * @param {number} curStrPos the current position in the curString\n   * @private\n   */\n  backspace(curString, curStrPos) {\n    if (this.pause.status === true) {\n      this.setPauseStatus(curString, curStrPos, false);\n      return;\n    }\n    if (this.fadeOut) return this.initFadeOut();\n\n    this.toggleBlinking(false);\n    const humanize = this.humanizer(this.backSpeed);\n\n    this.timeout = setTimeout(() => {\n      curStrPos = htmlParser.backSpaceHtmlChars(curString, curStrPos, this);\n      // replace text with base text + typed characters\n      const curStringAtPosition = curString.substring(0, curStrPos);\n      this.replaceText(curStringAtPosition);\n\n      // if smartBack is enabled\n      if (this.smartBackspace) {\n        // the remaining part of the current string is equal of the same part of the new string\n        let nextString = this.strings[this.arrayPos + 1];\n        if (\n          nextString &&\n          curStringAtPosition === nextString.substring(0, curStrPos)\n        ) {\n          this.stopNum = curStrPos;\n        } else {\n          this.stopNum = 0;\n        }\n      }\n\n      // if the number (id of character in current string) is\n      // less than the stop number, keep going\n      if (curStrPos > this.stopNum) {\n        // subtract characters one by one\n        curStrPos--;\n        // loop the function\n        this.backspace(curString, curStrPos);\n      } else if (curStrPos <= this.stopNum) {\n        // if the stop number has been reached, increase\n        // array position to next string\n        this.arrayPos++;\n        // When looping, begin at the beginning after backspace complete\n        if (this.arrayPos === this.strings.length) {\n          this.arrayPos = 0;\n          this.options.onLastStringBackspaced();\n          this.shuffleStringsIfNeeded();\n          this.begin();\n        } else {\n          this.typewrite(this.strings[this.sequence[this.arrayPos]], curStrPos);\n        }\n      }\n      // humanized value for typing\n    }, humanize);\n  }\n\n  /**\n   * Full animation is complete\n   * @private\n   */\n  complete() {\n    this.options.onComplete(this);\n    if (this.loop) {\n      this.curLoop++;\n    } else {\n      this.typingComplete = true;\n    }\n  }\n\n  /**\n   * Has the typing been stopped\n   * @param {string} curString the current string in the strings array\n   * @param {number} curStrPos the current position in the curString\n   * @param {boolean} isTyping\n   * @private\n   */\n  setPauseStatus(curString, curStrPos, isTyping) {\n    this.pause.typewrite = isTyping;\n    this.pause.curString = curString;\n    this.pause.curStrPos = curStrPos;\n  }\n\n  /**\n   * Toggle the blinking cursor\n   * @param {boolean} isBlinking\n   * @private\n   */\n  toggleBlinking(isBlinking) {\n    if (!this.cursor) return;\n    // if in paused state, don't toggle blinking a 2nd time\n    if (this.pause.status) return;\n    if (this.cursorBlinking === isBlinking) return;\n    this.cursorBlinking = isBlinking;\n    if (isBlinking) {\n      this.cursor.classList.add('typed-cursor--blink');\n    } else {\n      this.cursor.classList.remove('typed-cursor--blink');\n    }\n  }\n\n  /**\n   * Speed in MS to type\n   * @param {number} speed\n   * @private\n   */\n  humanizer(speed) {\n    return Math.round((Math.random() * speed) / 2) + speed;\n  }\n\n  /**\n   * Shuffle the sequence of the strings array\n   * @private\n   */\n  shuffleStringsIfNeeded() {\n    if (!this.shuffle) return;\n    this.sequence = this.sequence.sort(() => Math.random() - 0.5);\n  }\n\n  /**\n   * Adds a CSS class to fade out current string\n   * @private\n   */\n  initFadeOut() {\n    this.el.className += ` ${this.fadeOutClass}`;\n    if (this.cursor) this.cursor.className += ` ${this.fadeOutClass}`;\n    return setTimeout(() => {\n      this.arrayPos++;\n      this.replaceText('');\n\n      // Resets current string if end of loop reached\n      if (this.strings.length > this.arrayPos) {\n        this.typewrite(this.strings[this.sequence[this.arrayPos]], 0);\n      } else {\n        this.typewrite(this.strings[0], 0);\n        this.arrayPos = 0;\n      }\n    }, this.fadeOutDelay);\n  }\n\n  /**\n   * Replaces current text in the HTML element\n   * depending on element type\n   * @param {string} str\n   * @private\n   */\n  replaceText(str) {\n    if (this.attr) {\n      this.el.setAttribute(this.attr, str);\n    } else {\n      if (this.isInput) {\n        this.el.value = str;\n      } else if (this.contentType === 'html') {\n        this.el.innerHTML = str;\n      } else {\n        this.el.textContent = str;\n      }\n    }\n  }\n\n  /**\n   * If using input elements, bind focus in order to\n   * start and stop the animation\n   * @private\n   */\n  bindFocusEvents() {\n    if (!this.isInput) return;\n    this.el.addEventListener('focus', (e) => {\n      this.stop();\n    });\n    this.el.addEventListener('blur', (e) => {\n      if (this.el.value && this.el.value.length !== 0) {\n        return;\n      }\n      this.start();\n    });\n  }\n\n  /**\n   * On init, insert the cursor element\n   * @private\n   */\n  insertCursor() {\n    if (!this.showCursor) return;\n    if (this.cursor) return;\n    this.cursor = document.createElement('span');\n    this.cursor.className = 'typed-cursor';\n    this.cursor.setAttribute('aria-hidden', true);\n    this.cursor.innerHTML = this.cursorChar;\n    this.el.parentNode &&\n      this.el.parentNode.insertBefore(this.cursor, this.el.nextSibling);\n  }\n}\n"],"names":["class","_createStaticVNode","_imports_0","_hoisted_2","_createElementBlock","_hoisted_1","_hoisted_4","name","data","typedInstance","isSkip","methods","initTyped","item","text","options","strings","typeSpeed","backSpeed","showCursor","cursorChar","onComplete","self","this","cursor","hidden","Typed","spaceKey","event","key","$router","push","console","log","mounted","document","addEventListener","beforeUnmount","destroy","removeEventListener","__exports__","render","s","stringsElement","startDelay","smartBackspace","shuffle","backDelay","fadeOut","fadeOutClass","fadeOutDelay","loop","loopCount","Infinity","autoInsertCss","attr","bindInputFocusEvents","contentType","onBegin","t","preStringTyped","onStringTyped","onLastStringBackspaced","onTypingPaused","onTypingResumed","onReset","onStop","onStart","onDestroy","e","n","prototype","load","i","el","querySelector","isInput","tagName","toLowerCase","cursorBlinking","elContent","getAttribute","textContent","isPaused","map","trim","style","cssText","r","Array","slice","apply","children","o","length","a","innerHTML","u","strPos","currentElContent","getCurrentElContent","unshift","sequence","arrayPos","stopNum","curLoop","pause","status","typewrite","curString","curStrPos","typingComplete","appendCursorAnimationCss","appendFadeOutAnimationCss","value","createElement","setAttribute","body","appendChild","typeHtmlChars","substring","charAt","backSpaceHtmlChars","begin","toggle","start","stop","toggleBlinking","backspace","reset","clearInterval","timeout","replaceText","parentNode","removeChild","insertCursor","shuffleStringsIfNeeded","bindFocusEvents","setTimeout","classList","contains","remove","humanizer","test","exec","parseInt","temporaryPause","p","c","doneTyping","keepTyping","setPauseStatus","complete","initFadeOut","add","Math","round","random","sort","className","insertBefore","nextSibling"],"sourceRoot":""}